" colors
syntax on

set t_Co=256
set background=dark
colorscheme jeremy

" settings
set mouse=a                     " because mouse
set relativenumber              " relative line numbers
set nobackup                    " don't do backups
set ruler                       " show cursor position
set nowritebackup               " no backups
set noswapfile                  " no swapfiles
set hidden                      " hide buffers, rather than closing them
set modelines=0                 " don't allow modelines
set tabstop=2                   " two-space tabs
set shiftwidth=2                " two-space tabs
set expandtab                   " use spaces for tabs
set autoread                    " autoread
set incsearch                   " show search matches while you type
set ignorecase                  " ignore case when searching
set smartcase                   " ignore search case if all lowercase
set hlsearch                    " highlight search terms
set pastetoggle=<F2>            " toggle paste indentation w/ F2
set clipboard=unnamed           " share clipboard
set ttyfast                     " smoother redraws
set lazyredraw                  " do not redraw while executing macros
set showcmd                     " display incomplete commands
set title                       " set the title
set shortmess=atI               " eliminate annoying 'Press ENTER or type command to continue' notices
set laststatus=1                " status bar only shows if multiple files are open
set nolist                      " hide invisible characters
set iskeyword+=-                " allow dashes in keywords
set undofile                    " save undo buffer between vim instances
set undodir=~/.vim/undodir      " set directory for undo buffers

" This is vim, you don't need arrow keys.
map <Up> <NOP>
map <Down> <NOP>
map <Left> <NOP>
map <Right> <NOP>

" highlight characters past column 80
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

call pathogen#infect()
filetype plugin indent on

" indenting
au BufRead,BufNewFile *.scss set filetype=scss
au BufRead,BufNewFile *.sass set filetype=scss

" utf 8, just incase
scriptencoding utf-8
set encoding=utf-8

" custom binds I use
let mapleader = ","
nnoremap <leader><space> :noh<CR>
imap jk <Esc>
imap jj <Esc>
imap JJ <Esc>
nnoremap ; :
noremap Y $
noremap T ^
noremap K i<cr><esc>
nmap <leader>w :set wrap!<CR>
nmap <leader>k :set list!<CR>
inoremap <c-tab> <Esc><<i
nnoremap j gj
nnoremap k gk
nnoremap <silent> '. :cd %:p:h<cr>
cnoremap Q q
map <S-Enter> O<Esc>j
map <CR> o<Esc>

" for f{char} navigation
nnoremap n ;
nnoremap N ,
nnoremap m n
nnoremap M N

" to macro better
nnoremap ,q qq
nnoremap Q q
nnoremap q @q

" select outer
nnoremap co c2i

" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP

" handle correct paste indentation
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>

" save on focus lost
" autocmd FocusLost * :wa
"
" surround with quotes
map ,s ysiw

" map space to insert a single space under the cursor in command mode
nnoremap <silent> <Space> :call InsertSingle()<CR>
function! InsertSingle()
  sleep 120m|let l:a = getchar(0)
  if l:a != 0
    silent! exec "normal a" . nr2char(l:a)
  else
    silent! exec "normal a "
  endif
endfunction

" remove trailing whitespace
map <leader>rw :call StripTrailingWhitespaces()<CR>
fun! StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

" jump to last cursor position when opening a file.
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
  if &filetype !~ 'commit\c'
    if line("'\"") > 0 && line("'\"") <= line("$")
     exe "normal g`\""
    endif
  end
endfunction

" tagbar
nmap <F8> :TagbarToggle<CR>

" nerdtree
nmap <silent> <leader>n :NERDTreeTabsToggle<CR>
let g:NERDTreeDirArrows=1
let NERDTreeShowHidden=1

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='dark'

" nerdtree tab navigation
map <F1> :tabprev<CR>
map <F2> :tabnext<CR>

" nerdcommenter
" let NERDSpaceDelims=1
" let NERDCompactSexyComs=1

" gists
let g:gist_api_url = 'http://git.enova.com/api/v3'

" seeing is believing
let g:xmpfilter_cmd = "seeing_is_believing"

" auto insert mark at appropriate spot.
autocmd FileType ruby nmap <buffer> <leader>x <Plug>(seeing_is_believing-run)
autocmd FileType ruby xmap <buffer> <leader>x <Plug>(seeing_is_believing-run)
autocmd FileType ruby imap <buffer> <leader>x <Plug>(seeing_is_believing-run)

" mark certain lines
autocmd FileType ruby nmap <buffer> <leader>m <Plug>(seeing_is_believing-mark)
autocmd FileType ruby xmap <buffer> <leader>m <Plug>(seeing_is_believing-mark)
autocmd FileType ruby imap <buffer> <leader>m <Plug>(seeing_is_believing-mark)

" clean all marks
autocmd FileType ruby nmap <buffer> <leader>cl <Plug>(seeing_is_believing-clean):call StripTrailingWhitespaces()<CR>
autocmd FileType ruby xmap <buffer> <leader>cl <Plug>(seeing_is_believing-clean):call StripTrailingWhitespaces()<CR>
autocmd FileType ruby imap <buffer> <leader>cl <Plug>(seeing_is_believing-clean):call StripTrailingWhitespaces()<CR>

" run only marked / xmpfilter compatible
autocmd FileType ruby nmap <buffer> <leader>cx <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby xmap <buffer> <leader>cx <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby imap <buffer> <leader>cx <Plug>(seeing_is_believing-run_-x)

" highlight conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" move between panes
map <leader>j <C-w>j
map <leader>k <C-w>k
map <leader>l <C-w>l
map <leader>h <C-w>h

" splitjoin plugin
nmap zj :SplitjoinSplit<cr>
nmap zk :SplitjoinJoin<cr>

" formatted paste
nmap <leader>p pV`]=
nmap <leader>P PV`]=

" tab indents
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" visual fold lines with F9
inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf

" replace quotes
map <F3> :%s/"\(\([^"]*\)\)"/'\1'/g<cr>

" replace hashrockets
nmap <F4> :s/\:\([a-zA-Z_]*\)\s=>/\1\:/g<cr>
vmap <F4> :'<,'>s/\:\([a-zA-Z_]*\)\s=>/\1\:/g<cr>

" ctrl p for cnuapp
set wildignore+=/media/**,*//home/alan/media/**,*//home/alan/Music/**,*/*.scssc
set wildignore+=*.pyc,*/*.scssc
set wildignore+=*/cabar/*,*/cnu_active_record/*,*/cnuapp_ci/*,*/cnuapp_doc/*,*/cnuapp_env/*
set wildignore+=*/cnuapp_qa/*,*/cnuapp_rack/*,*/cnu_bloom/*,*/cnu_brand/*,*/cnu_cluster/*
set wildignore+=*/cnu_config/*,*/cnu_content/*,*/cnu_database/*,*/cnu_gems/*,*/cnu_ivr/*
set wildignore+=*/cnu_ldap/*,*/cnu_locale/*,*/cnu_logger/*,*/cnu_memcache/*,*/cnu_perf/*
set wildignore+=*/cnu_pg/*,*/cnu_product_offering/*,*/cnu_rails_app/*,*/cnu_regexp/*
set wildignore+=*/cnu_ruby_build/*,*/cnu_ruby_core/*,*/cnu_ruby_lib/*,*/cnu_scm/*
set wildignore+=*/cnu_selenium/*,*/cnu_service/*,*/cnu_space/*,*/cnu_test/*,*/contenter_api/*
set wildignore+=*/cookbooks/*,*/db_global/*,*/doc/*,*/enf_app/*,*/enf_log/*,*/lsws-3.3.14/*
set wildignore+=*/mod_rails/*,*/rails-1.2/*,*/red_steak/*,*/screenshots/*,*/shout_trace/*
set wildignore+=*/sol_api/*,*/trick_serial/*,*/waffles/*,*/wtf/*
set wildignore+=*static/CACHE/css/*
set wildignore+=*/cnuapp/apache/*,*/cnuapp/bin/*
set wildignore+=*/cnuapp/debian/*,*/cnuapp/gems/*,*/cnuapp/gui/*,*/cnuapp/include/*
set wildignore+=*/cnuapp/locproot/*,*/cnuapp/lsws/*,*/cnuapp/noderoot/*
set wildignore+=*/cnuapp/plugins/*,*/cnuapp/queries/*,*/cnuapp/Rakefile/*,*/cnuapp/Rakefile.US/*
set wildignore+=*/cnuapp/result.GB/*,*/cnuapp/result.GB.fail/*,*/cnuapp/result.GB.last/*
set wildignore+=*/cnuapp/result.GB.pass/*,*/cnuapp/script/*,*/cnuapp/src/*
set wildignore+=*/cnuapp/tmp/*,*/cnuapp/tools/*,*/cnuapp/typeroot/*,*/cnuapp/var/*
set wildignore+=*/cnuapp/vendor/*
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
let g:ctrlp_max_files =0
let g:ctrlp_max_depth =1000
let g:ctrlp_max_height = 50
let g:ctrlp_working_path_mode = 0
let g:ctrlp_clear_cache_on_exit = 0
let g:CommandTMaxFiles=50000
let g:ctrlp_open_multiple_files = 't'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$',
  \}
